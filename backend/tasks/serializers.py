# backend/tasks/serializers.py

from rest_framework import serializers
from .models import Task # Import the Task model from the same app

# TaskSerializer
# This serializer is used for converting Task model instances to JSON
# and for validating incoming data when creating or updating tasks.
class TaskSerializer(serializers.ModelSerializer):
    # 'user' field is read-only and represents the username of the task owner.
    # This prevents the client from setting the user directly when creating/updating tasks,
    # as the user should be determined by the authenticated user making the request.
    user = serializers.ReadOnlyField(source='user.username')

    class Meta:
        model = Task # Specifies that this serializer is for our Task model
        # Fields to include in the serialization/deserialization.
        # 'id' is automatically generated by Django and is useful for frontend operations.
        # 'user' is included as a read-only field.
        # 'created_at' and 'updated_at' are automatically managed by the model.
        fields = ['id', 'user', 'title', 'description', 'due_date', 'status', 'created_at', 'updated_at']
        # 'read_only_fields' explicitly marks fields that should only be read, not written to by the client.
        # 'user' is already handled by ReadOnlyField, but explicitly listing it here is good practice.
        # 'created_at' and 'updated_at' are auto-managed timestamps.
        read_only_fields = ['user', 'created_at', 'updated_at']

